stages:
  - webhook
  - validate
  - build
  - deploy

variables:
  NODE_ENV: production
  CONTENTFUL_SPACE_ID: $CONTENTFUL_SPACE_ID
  CONTENTFUL_ACCESS_TOKEN: $CONTENTFUL_ACCESS_TOKEN
  CONTENTFUL_PREVIEW_ACCESS_TOKEN: $CONTENTFUL_PREVIEW_ACCESS_TOKEN
  VERCEL_TOKEN: $VERCEL_TOKEN
  VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
  VERCEL_ORG_ID: $VERCEL_ORG_ID

validate:
  stage: validate
  image: node:20
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  variables:
    NODE_ENV: 'development'
    NPM_CONFIG_PRODUCTION: 'false'
  script:
    # Fail early with clear message when required Contentful variables are missing
    - |
      if [ -z "$CONTENTFUL_SPACE_ID" ]; then
        echo "ERROR: CONTENTFUL_SPACE_ID is not set in CI variables"; exit 1
      fi
    - |
      if [ -z "$CONTENTFUL_ACCESS_TOKEN" ]; then
        echo "ERROR: CONTENTFUL_ACCESS_TOKEN is not set in CI variables"; exit 1
      fi
    - |
      if [ -z "$CONTENTFUL_PREVIEW_ACCESS_TOKEN" ]; then
        echo "WARNING: CONTENTFUL_PREVIEW_ACCESS_TOKEN is not set (only needed for draft preview)"
      fi
    - npm ci
    - npm run lint
    - npm run test:coverage
  artifacts:
    paths:
      - coverage
    expire_in: 1 week

contentful_publish:
  stage: webhook
  image: busybox:1.36.1
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always
    - when: never
  script:
    - 'echo "Pipeline started by trigger (CI_PIPELINE_SOURCE=$CI_PIPELINE_SOURCE)"'
    - 'echo "CONTENTFUL_EVENT=${CONTENTFUL_EVENT:-not_set}"'
    - 'echo "CONTENTFUL_ENTRY_ID=${CONTENTFUL_ENTRY_ID:-not_set}"'
    - 'echo "Trigger ref: $CI_COMMIT_REF_NAME"'
    - 'echo "Continuing with pipeline..."'

build:
  stage: build
  image: node:20
  dependencies:
    - validate # pega o node_modules do validate
  script:
    - npm run build
  artifacts:
    paths:
      - .next
    expire_in: 1 week

deploy:
  stage: deploy
  image: node:20
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always
    - when: never
  dependencies:
    - build
  script:
    - |
      if [ -z "$VERCEL_TOKEN" ]; then
        echo "ERROR: VERCEL_TOKEN is not set in CI variables"; exit 1
      fi
    - npm ci
    - npm run build
    - npm install -g vercel
    - |
      # Print diagnostics about the Vercel CLI to help debugging token/project issues
      echo "Vercel CLI version:"; vercel --version || true
      echo "Checking Vercel token mapping (whoami):"; vercel --token "$VERCEL_TOKEN" whoami || echo "whoami failed or token invalid"

      # Detect whether the installed Vercel CLI supports the --project flag.
      # Some older CLI versions don't accept --project; in that case we must not pass it.
      SUPPORTS_PROJECT=0
      if vercel --help 2>&1 | grep -q -- "--project"; then
        SUPPORTS_PROJECT=1
      fi
      echo "Vercel CLI supports --project: ${SUPPORTS_PROJECT}"

      # Build the vercel deploy command. Use optional project/org params when present.
      DEPLOY_CMD=(vercel --prod --token "$VERCEL_TOKEN" --confirm)
      # Prefer an explicit project slug/name provided via VERCEL_PROJECT_NAME.
      # If only VERCEL_PROJECT_ID is set and it looks like an API id (starts with prj_),
      # the CLI may not accept it as a project slug. In that case, set VERCEL_PROJECT_NAME
      # to the project slug (from the Vercel project URL: /<team-or-user>/<project-slug>).
      if [ -n "$VERCEL_PROJECT_NAME" ]; then
        echo "Using VERCEL_PROJECT_NAME='$VERCEL_PROJECT_NAME' for explicit project targeting"
        if [ "${SUPPORTS_PROJECT}" -eq 1 ]; then
          DEPLOY_CMD+=(--project "$VERCEL_PROJECT_NAME")
        else
          echo "Notice: installed Vercel CLI does not support --project; deploying without explicit project flag"
        fi
      elif [ -n "$VERCEL_PROJECT_ID" ]; then
        case "$VERCEL_PROJECT_ID" in
          prj_*)
            echo "VERCEL_PROJECT_ID appears to be an API id (starts with 'prj_')."
            echo "Please set VERCEL_PROJECT_NAME to the project slug (team/project) to target the project explicitly."
            ;;
          *)
            echo "Using VERCEL_PROJECT_ID='$VERCEL_PROJECT_ID' as project slug"
            if [ "${SUPPORTS_PROJECT}" -eq 1 ]; then
              DEPLOY_CMD+=(--project "$VERCEL_PROJECT_ID")
            else
              echo "Notice: installed Vercel CLI does not support --project; deploying without explicit project flag"
            fi
            ;;
        esac
      else
        echo "No VERCEL_PROJECT_NAME or usable VERCEL_PROJECT_ID set; deploying without explicit project (will use token owner account)"
      fi

      # Only include scope if an explicit VERCEL_SCOPE (team slug) is provided
      if [ -n "$VERCEL_SCOPE" ]; then
        echo "Using VERCEL_SCOPE='$VERCEL_SCOPE' for organization scope"
        DEPLOY_CMD+=(--scope "$VERCEL_SCOPE")
      fi
      echo "Deploying to Vercel (masked token) ..."
      # run deploy but don't let an unexpected non-zero exit code kill the job
      set +e
      "${DEPLOY_CMD[@]}"
      DEPLOY_EXIT=$?
      set -e
      echo "Vercel CLI exit code: ${DEPLOY_EXIT}"
      if [ ${DEPLOY_EXIT} -ne 0 ]; then
        echo "Warning: Vercel CLI returned non-zero exit code ${DEPLOY_EXIT}. The deployment may still have completed."
        echo "You can inspect Vercel dashboard to confirm the deployment status."
      fi
  after_script:
    - |
      if [ -n "$TEAMS_WEBHOOK_URL" ]; then
        echo "TEAMS_WEBHOOK_URL appears set (length: ${#TEAMS_WEBHOOK_URL})"
        if [ "$CI_JOB_STATUS" = "success" ]; then
          payload='{"text":"‚úÖ Deploy conclu√≠do com sucesso no Vercel (GitLab)! üéâ"}'
        else
          payload='{"text":"‚ùå O deploy falhou no GitLab! Verifica o pipeline üòû"}'
        fi
        echo "Sending notification to Teams (masked)..."
        # Capture curl exit and HTTP status without printing the webhook URL
        http_code=$(curl -s -S -o /tmp/teams_resp -w "%{http_code}" -H "Content-Type: application/json" -d "$payload" "$TEAMS_WEBHOOK_URL" || echo "CURL_FAILED")
        echo "curl returned: $http_code"
        if [ -f /tmp/teams_resp ]; then
          echo "Response body (first 200 chars):"
          head -c 200 /tmp/teams_resp | sed -n '1,200p'
        fi
      else
        echo "TEAMS_WEBHOOK_URL not set; skipping notification"
      fi
